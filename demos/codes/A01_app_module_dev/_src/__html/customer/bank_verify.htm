<template id="contentTmpl">
<div>
    <div class="main_content">
        <section id="newBind" class="modifymobile_content _03">
            <div class="layout_form p-top-rmv">
                <form id="infoForm" action="" method="post">  
                    <input type="hidden" name="operate" id="operate" value="0"/>
                    <input name="act" type="hidden" value="bindPhone"/>          
                    <div class="form_field_wrap">
                        <div class="form_field">
                            <span class="label">手机号码</span>      
                            <div class="input_wrap">
                                <input class="txt_right" type="text" v-bind:readonly="isRead" v-model="mobile" maxlength="11" >
                            </div>
                        </div>  
                        <div class="form_field">
                            <span class="label">验证码</span>      
                            <div class="input_wrap sm"><input type="text" v-model="codeInput" name="code" maxlength="6"></div>
                            <div id="sendCode" v-bind:class="[disabled ? '' : 'active-btn', 'sendCode']" v-on:click.stop.prevent="sendCode">{{send_btn_text}}</div>
                        </div>  
                    </div>
                    <p class="notif" v-if="code_sended">验证码已发送，15分钟内输入有效，请勿泄漏</p>
                    <div class="form_btn-wrap">
                        <a id="bindPhone" v-on:click.stop.prevent="checkCode" class="btn btn-lg btn-ylw">确定</a>
                    </div>
                </form>
            </div>
        </section>
    </div>
</div>
</template>
<script>
appState.setData({
    needLogin: true,
    title: '添加银行卡'
});
Vue.component("app-content", {
    template: "#contentTmpl",
    data: function () {
        return {
            time: 0,
            code_sended: false,
            telephone: '',
            mobile: '',
            codeInput: '',
            isRead: false
        }
    },
    mounted:function (){
        var _this = this;
        JSBridge.onReady(function(){
            Request.userInfo(function(customer){
                _this.telephone = customer.phone;
                _this.mobile = customer.phone ? customer.phone.substring(0,3) + "****" + customer.phone.substr(-4) : "";
                if (customer.phone) _this.isRead = true;
            },function(){});
        });
    },
    methods: {
        timer: function() {
            var _this = this;
            if (this.time > 0) {
                this.time--;
                setTimeout(_this.timer, 1000);
            }
        },
        sendCode: function() {
            if (this.disabled) return;
            if(!this.telephone) {
                $.toast.fail("请输入手机号码");
                return;
            }
            if(!(/[\d]+\*/.test(this.telephone)) && !(/^1[34578]\d{9}$/.test(this.telephone))) {
                $.toast.fail("请输入正确的手机号码格式");
                return;
            }
            //发送验证码
            var _this = this;
            JSBridge.net.invoke({
                url: "verify/send",
                data: {
                    "type": 1,
                    "v_type": 3,
                    "send_to": this.telephone,
                    "timestamp": Date.now()
                },
                success: function (result) {
                    _this.time = 60
                    _this.timer();
                    _this.code_sended = true;
                },
                error: function (error) {
                    $.toast.fail(error.message);
                }
            });
        },
        checkCode: function() {
            var _this = this;
            if(!_this.codeInput) {
                $.toast.fail("请输入验证码");
                return;
            }
            //验证验证码
            JSBridge.net.invoke({
                url: "verify/check",
                data: {
                    "type": 1,
                    "v_type": 3,
                    "send_to": _this.telephone,
                    "code": _this.codeInput
                },
                success: function (result) {
                	isAllowAddBankCard();
                    JSBridge.forward.inside({url: "customer/bank_add.htm", newView: true});
                },
                error: function (error) {
                	console.log(error.message);
                    $.toast.fail('验证码验证失败', function(){
                    	var times = 0
                        var dataCache = JSBridge.cache.get("bankCardPhoneVerifyTimesData");
                        if (dataCache && new Date().getTime() < dataCache.outtime) {
                            times = !dataCache.data.times ? 0 : parseInt(dataCache.data.times);
                        }
                        times = times+1;
       
                        JSBridge.cache.save("bankCardPhoneVerifyTimesData", {
                            data: {"times": times},
                            outtime: new Date().getTime() + 1800000
                        }, 1);
                        if (times>=3) {
                            JSBridge.cache.save("bankCardVerifyMothodData", {
                                data: {
                                    "phone": false, 
                                    "manual": true
                                },
                                outtime: new Date().getTime() + 1800000
                            }, 1);
                            JSBridge.forward.inside({url: "customer/bank_method.htm", newView: true});
                        }
                    });
                }
            });
        }
    },
    computed: {
        send_btn_text: function () {
            if (this.code_sended) {
                return this.time > 0 ? '重新发送（'+this.time+'）' : '重新发送';
            } else {
                return '发送验证码'
            }
        },
        disabled: function() {
            return this.time > 0;
        }
    }
});

function isAllowAddBankCard(){
    JSBridge.cache.save("bankCardAddStatusData", {
        data: {"status": true},
        outtime: new Date().getTime() + 10000
    }, 1);
}
</script>